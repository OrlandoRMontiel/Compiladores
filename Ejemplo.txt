//OPERACIONES BÁSICAS
( setf var1 [ 3 ] { 1 , 2 , 3 } ) ( setf var2 [ 3 ] { 4 , 5 , 6 } ) 
( setf i [ 3 ] { 1 , 0 , 0 } ) ( setf j [ 3 ] { 0 , 1 , 0 } ) ( setf k [ 3 ] { 0 , 0 , 1 } )
( Imprimir [ var1 ] ) 
( Imprimir [ * var1 var2 ] ) 
( Imprimir [ + var1 var2 ] ) 
( Imprimir [ - var1 var2 ] ) 
( Imprimir [ . var1 var2 ] ) 

( Imprimir [ * i j ] ) 
( Imprimir [ * j k ] ) 
( Imprimir [ * k i ] ) 

//CICLOS
( setf i 12 ) if ( > i 2 ) { ( setf i 100 ) } else { ( setf i 0 ) }  ( Imprimir [ i ] )
( setf cont 7 ) while ( >= cont 0 ) { ( Imprimir [ var1 ] ) ( setf var1 ( + var1 var1 ) ) ( setf cont  ( - cont 1 ) ) }

//CICLO FINITO
( setf var2 var1 ) 
( Imprimir [ var1 ] ) 
while ( <= | var1 | 20 ) { ( setf var1 ( + var1 var1 ) ) ( Imprimir [ var1 ] ) } 

//COMPARACIONES
if ( < 4 5 ) { ( Imprimir [ ( setf var3 [ 3 ] { 1 , 2 , 4 } ) ] ) } 
if ( > 5 4 ) { ( Imprimir [ ( setf var3 [ 3 ] { 1 , 2 , 3 } ] ) } 
if ( <= 4 5 ) { ( Imprimir [ ( setf var3 [ 3 ] { 1 , 2 , 4 } ] ) } 
if ( >= 5 4 ) { ( Imprimir [ ( setf var3 [ 3 ] { 1 , 2 , 3 } ] ) } 

//IF-ELSE ANIDADO 
( setf var4 4 ) if ( > 5 4 ) { if ( > 2 3 ) { ( Imprimir [ 5 ] ) ( Imprimir [ 100 ] ) } else { ( Imprimir [ 4 ] ) ( Imprimir [ 200 ] ) } ( Imprimir [ 300 ] ) } ( Imprimir [ 400 ] ) 


//WHILE's ANIDADOS
( setf i 0 ) while ( < i 5 ) { ( setf j 0 ) while ( < j 5 ) { ( Imprimir [ + i 10 ] ) ( Imprimir [ + j 20 ] ) ( setf j ( + j 1 ) ) } ( setf i ( + i 1 ) ) } 

//IF's ANIDADOS
if ( == 5 5 ) { if ( >= 3 2 ) { ( Imprimir [ 15 ] ) } ( Imprimir [ 30 ] ) } 

//FOR BÁSICO
for ( setf i 0 ; < i 5 ; setf i ( + i 1 ) ) { ( Imprimir [ i ] ) }
( setf i 0 ) for ( ; < i 5 ;  ) { ( Imprimir [ i ] ) ( setf i ( + i 1 ) ) }

//OTRO EJEMPLO DE FOR
for ( setf i 0 ; < i 5 ; setf i ( + i 1 ) ) { for ( setf j 0 ; < j 5 ; setf j ( + j 1 ) ) { ( Imprimir [ + ( * i 5 ) j ] ) } ( Imprimir [ 100 ] ) }

Compilar y ejecutar:
byaccj -J P2.y
javac *.java -nowarn
java Parser